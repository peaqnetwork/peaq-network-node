
//! Autogenerated weights for `inflation_manager`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-09-20, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-99-1-200-206`, CPU: `AMD EPYC 7R32`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev-local")`, DB CACHE: 1024

// Executed Command:
// ./target/release/peaq-node
// benchmark
// pallet
// --chain=dev-local
// --execution=native
// --wasm-execution=compiled
// --pallet=inflation_manager
// --extrinsic=*
// --steps=50
// --repeat=20
// --output=weight.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `inflation_manager`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> crate::WeightInfo for WeightInfo<T> {
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `AddressUnification::EvmAddresses` (r:1 w:0)
	/// Proof: `AddressUnification::EvmAddresses` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	fn transfer_all_pot() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `234`
		//  Estimated: `6196`
		// Minimum execution time: 88_732_000 picoseconds.
		Weight::from_parts(89_652_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `InflationManager::DoInitializeAt` (r:0 w:1)
	/// Proof: `InflationManager::DoInitializeAt` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `InflationManager::TotalIssuanceNum` (r:0 w:1)
	/// Proof: `InflationManager::TotalIssuanceNum` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `InflationManager::DoRecalculationAt` (r:0 w:1)
	/// Proof: `InflationManager::DoRecalculationAt` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_delayed_tge() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_080_000 picoseconds.
		Weight::from_parts(5_260_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `InflationManager::DoInitializeAt` (r:1 w:0)
	/// Proof: `InflationManager::DoInitializeAt` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `InflationManager::DoRecalculationAt` (r:0 w:1)
	/// Proof: `InflationManager::DoRecalculationAt` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_recalculation_time() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `230`
		//  Estimated: `1489`
		// Minimum execution time: 9_660_000 picoseconds.
		Weight::from_parts(9_880_000, 0)
			.saturating_add(Weight::from_parts(0, 1489))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `InflationManager::BlockRewards` (r:0 w:1)
	/// Proof: `InflationManager::BlockRewards` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_block_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_190_000 picoseconds.
		Weight::from_parts(4_450_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
